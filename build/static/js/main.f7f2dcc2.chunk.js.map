{"version":3,"sources":["logo.svg","theme.ts","components/TestComponent/TestComponent.tsx","components/Project/Project.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","themeForName","dark","--color","light","TestComponent","_useState","useState","_useState2","Object","slicedToArray","a","setA","react_default","createElement","onChange","_ref","target","theme","value","entries","forEach","_ref2","_ref3","k","v","document","getElementsByTagName","style","setProperty","String","map","color","concat","className","Project","message","App","src","logo","alt","href","rel","components_TestComponent_TestComponent","components_Project_Project","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,4OCSzBC,SATW,CACxBC,KAAM,CACJC,UAAW,SAEbC,MAAO,CACLD,UAAW,UCuBAE,EAxBiB,WAC9B,IAAAC,EAAoBC,mBAAS,GAA7BC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAAQK,EAARH,EAAA,GAAWI,EAAXJ,EAAA,GACA,OACEK,EAAAF,EAAAG,cAAA,WACED,EAAAF,EAAAG,cAAA,UACEC,SAAU,SAAAC,GAAgB,IAAbC,EAAaD,EAAbC,OACLC,EAAQjB,EAAagB,EAAOE,OAClCP,EAAKD,EAAI,GACTF,OAAOW,QAAQF,GAAOG,QAAQ,SAAAC,GAAY,IAAAC,EAAAd,OAAAC,EAAA,EAAAD,CAAAa,EAAA,GAAVE,EAAUD,EAAA,GAAPE,EAAOF,EAAA,GACxCG,SAASC,qBAAqB,QAAQ,GAAGC,MAAMC,YAAYL,EAAGM,OAAOL,QAIxE,CAAC,OAAQ,SAASM,IAAI,SAAAC,GAAK,OAC1BnB,EAAAF,EAAAG,cAAA,UAAQK,MAAOa,GAAf,GAAAC,OACMD,EADN,KAAAC,OACetB,OAInBE,EAAAF,EAAAG,cAAA,KAAGoB,UAAU,UAAb,kBCPSC,EAVyB,SAAAnB,GAElC,IADJoB,EACIpB,EADJoB,QAEA,OACEvB,EAAAF,EAAAG,cAAA,WACGsB,ICkBQC,EAvBO,WACpB,OACExB,EAAAF,EAAAG,cAAA,OAAKoB,UAAU,OACbrB,EAAAF,EAAAG,cAAA,UAAQoB,UAAU,cAChBrB,EAAAF,EAAAG,cAAA,OAAKwB,IAAKC,IAAML,UAAU,WAAWM,IAAI,SACzC3B,EAAAF,EAAAG,cAAA,iBACOD,EAAAF,EAAAG,cAAA,2BADP,wBAGAD,EAAAF,EAAAG,cAAA,KACEoB,UAAU,WACVO,KAAK,sBACLxB,OAAO,SACPyB,IAAI,uBAJN,gBASF7B,EAAAF,EAAAG,cAAC6B,EAAD,MACA9B,EAAAF,EAAAG,cAAC8B,EAAD,CAASR,QAAQ,kBCZHS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAF,EAAAG,cAACsC,EAAD,MAAS1B,SAAS2B,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f7f2dcc2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","const themeForName: any = {\n  dark: {\n    \"--color\": \"black\"\n  },\n  light: {\n    \"--color\": \"grey\"\n  }\n}\n\nexport default themeForName;","import React, { useState } from 'react';\nimport \"./test-component.scss\";\nimport themeForName from \"../../theme\";\n\nconst TestComponent: React.FC = () => {\n  const [ a, setA ] = useState(0);\n  return (\n    <div>\n      <select\n        onChange={({ target }) => {\n          const theme = themeForName[target.value];\n          setA(a + 1);\n          Object.entries(theme).forEach(([k, v]) => {\n            document.getElementsByTagName(\"html\")[0].style.setProperty(k, String(v));\n          });\n        }}\n      >\n        {[\"dark\", \"light\"].map(color => (\n          <option value={color}>\n            {`${color} ${a}`}\n          </option>\n        ))}\n      </select>\n      <p className=\"option\">Hello World!</p>\n    </div>\n  );\n}\n\nexport default TestComponent;\n","import React from 'react';\n\ninterface ProjectProps {\n  message: String\n}\n\nconst Project: React.FC<ProjectProps> = ({\n  message\n}) => {\n  return (\n    <div>\n      {message}\n    </div>\n  )\n};\n\nexport default Project;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport TestComponent from \"./components/TestComponent/TestComponent\";\nimport Project from \"./components/Project/Project\";\n\nconst App: React.FC = () => {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n      <TestComponent />\n      <Project message=\"Hello World\" />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}